
mongo - Shell
mongod - Server

------------------------------------

open command prompt and type monngod and then mongo shell

create a directory C:\\data\db

-------------------------------------------------------------

db - database
names - collection
record - values

-- create collection --

db.createCollection("names")

db.names.insert({})

type help to find all help commands

sharding, replica and more db commands.


.insertOne({}) 
 - acknowledged : true. 
 - insertedId : xxxx

 db.collection.find()
  returns the records from that particular collection.

 db.collection.find.pretty()

 queryoperators and other parameters.

 .find({}) - returns cursor object so we can use next command to find the next record.

 var records = db.collection.find({});

 records.hasNext(); - true or flase.

 records.next() - will return the next record from the collection.

 cursor keep the track of the records.

 use dbname - will switch to that db name. If not exist, it will create new db with that name.

 ----------------------------------------------- Query Operators (selectors) -------------------------------------------

 Array
 $all - Are used to find the documents specified in the array. 
        (returns the matching document if all (&) array item mactches).

    db.movies.find({geners: { $all: ["Comedy", "Crime", "Drama"] }}).pretty();

$elemMatch - design to find the documents match in array of objects.
            db.moviesDetails.find({ $elemMatch: {country: "INDIA", revenue: { $lt:10 }} }).pretty()

        We can find search the documents based on boxoffice which will return the all country specified with INDIA
        like - 
        db.movieDetails.find({boxOffice: { country: "INDIA", revenue: { $lt:10 } }}) (matched or - either country or revenue)

        so we ncan use $elememMatch - 

        db.movieDetails.find( {boxOffice: {$elememMatch: {country: "INDIA", revenue: {&gt: 15}}}} ) (matches and - country = India and revenue)

$size - Returns documents if the array field specified is a specified size.
        db.moviesDetails.find({ countries: {$size: 1} }).pretty()


----------------------------------- Comparison Operators ----------------------------------------------

https://docs.mongodb.com/manual/reference/operator/query/



----------------------------------------- CURD -------------------------------------------------------

insert
insertOne
insertMany 

https://stackoverflow.com/questions/36792649/whats-the-difference-between-insert-insertone-and-insertmany-method



InsertMany (By default it inserts the value in order) - If we try to insert duplicate records, it will throug the exception and stop insertion.

and will give the msg that two got inserted and at third we have duplicate record.

Note - If we pass {"ordered": false} in insertMany command it will insert the records and give the error at last.


**** Update commands ***

We can insert the data using update command as well, we called "UPSERTS"

**** Element Operators ***

$exists: true - to check if any object has the key - "tommato.meter"

$type: string or interger

if we have inserted the id manually and for the same record autogenerated object id is alos there 
so we can filter using &type - 

db.collection.find({"_id": { $type: "string" }}).pretty();
db.collection.find({"_id": { $type: "string" }}).count();

in this case object id's records will not come which got generated automatically

-------------------------------------------------------------------------------------

********************* Logical oprators ***********************

$or, $and, $not, $nor

$or - taks arrya of creteria and find the records maching any of one.
$and - taks arrya of creteria and find the records maching all elements. (On the same field we can specify the two value using and)

******* Reading document with nested documents with quality matches ***********

Array matched in sequences - 
db.moviesDetails.find({"writer": ["kanchan", "Mamta"]}).count() = 1 (Array should have the same order)
db.moviesDetails.find({"writer": ["Mamta", "kanchan"]}).count() = 0

-- find the records where kanchan is at zero postion of the array - 

db.moviesDetails.find({"writer.0": {"kanchan"});


------------- Cursor and Projections ---------------------

A find method returns a cursors.

A cursor has limit to returns the records, 4 mb (101 records) as initial and if we assing the records to variable
we can access them by using .next(), which will return the next batch of record.


var c = db.movies.find();
var doc = function() {
    return c.hasNext() ? c.next() : null;
}

how to know how many records are in batch - 

c.objsLeftInBatch(); = 101;

by calling doc() will return next record and will remove them from batch

after calling doc() two time, 99 would be pending in the batch.

c.objsLeftInBatch(); = 99;


--- Projection --

Projection is a handy way to reduce the size of data return. it limits the fields while processing the
documents to reduce the size.

Project are supplied to the second command in the find command.

db.movieDetails.find({ rated: "PG" }, {title: 1}); - this will return the titles only with id. 

if you want to exclude the id explicit, you can specify it - 

db.movieDetails.find({ rated: "PG" }, {title: 1, _id: 0});

We can type "it" is mongo shell to iterate through the records instead on .next()


***** Regular expression operator *****

"awards: {
    "text: "Nominated for 1 Oscar. Another 13 Wons & 47 nomination"
}

"awards: {
    "text: "Nominated for 1 Oscar. Another 6 Wons & 44 nomination"
}

"awards: {
    "text: "Nominated for 1 Oscar. Another 8 Wons & 19 nomination"
}

"awards: {
    "text: "Nominated for 1 Oscar"
}

db.movieDetails.find({"awards.text": {$regx : /^Won.*/})

or add space \same

db.movieDetails.find({"awards.text": {$regx : /^Won\s*/})




********************* _id ********************

objectId: 12 byte hex string

Date(4) - Mac Address(3) - PID(2) - counters(3)



******** Update and Delete documents ***************

There are some situations where update endup with create.

1) UpdateOne - Update the first document of the matching selectors.
2) UpdateMany
3) ReplaceOne

db.movieDetails.updateOne({title: "kanchan"}, {$set: {poster: "https://incred.com/image.png"}});

If you try to update an value and it is not exist then it will get added in the record.


Update field operators - $set, $unset, $min, $max, $rename, $currentDate, $inc, $mul, $setOnInsert

db.movieDetails.updateOne({title: "kanchan"}, {$inc: {"tomato.review": 3, "tomato.userReview: 4"}});


------ Update Array Fields oprators -----------

$addToSet - Add them to Array if already not exist.
$pop - Remove the first and last item of the array
$pullAll - Remove All matching values from Array.
$pull - Remove all element that match a specific query.
$push - Add an item to array. 
$position:0 (modifier) to push the value in specific position.

$each - To traverse through each records.

$slice:5 (-5 to last records) - to keep the limit of the records.


----------- UPSERT ------

db.movieDetails.updateOne(
    {"imdb.id": details.imdb.id},
    { $set : details },
    { upsert: true }
)

In above code, it will try to match the condition for - "imdb.id": details.imdb.id, if does not exist then 
it will insert the record as upsert is true.



db.movieDetails.ReplaceOne(
    {"imdb": details.imdb.id}, details
)

Note : detail is an object the needs to be replace.


************************  Projection (Field Projection)  **************************************************************

In some circumstances Projection is Many.






























 










